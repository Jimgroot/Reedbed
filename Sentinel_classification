//Metadata
//Jim Groot 2017
//This Script is purposed on the automatic classification of reedbed vegetation within the Lake Balaton area, Hungary.
//
//
//
//
//Last revision 5-12-2017


// Load the Sentinel-1 ImageCollection.
var sentinel1 = ee.ImageCollection('COPERNICUS/S1_GRD');

// Load the Sentinel-2 ImageCollection
var sentinel2 = ee.ImageCollection('COPERNICUS/S2');

// Load the polygons containing Phragmites precence
// This data is externally processed, Zlinszky et al. 2010 provided field data including phragmites presence data aquired around
// Lake Balaton. This data was converted to polygon data so it can be used within the GEE environment.
var phragmites = ee.FeatureCollection('users/dudejimmy/Phragmites');

// Filter by metadata properties.
var vvvh = sentinel1
  // Filter to get images with VV and VH dual polarization.
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
  // Filter to get images collected in interferometric wide swath mode.
  //.filter(ee.Filter.eq('instrumentMode', 'IW'))
  //.filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))
  .filter(ee.Filter.bounds(geometry2));
  
var vh  = vvvh.select('VH');
var vv  = vvvh.select('VV');

//Create timeseries for whole year 2015
var vhy = vh.filterDate('2015-01-01', '2015-12-31');
var vvy = vv.filterDate('2015-01-01', '2015-12-31');

// Create timeseries for summer and winter
var vhs =  vh.filterDate('2015-06-01', '2015-09-01');
var vvs =  vv.filterDate('2015-06-01', '2015-09-01');
var vhw =  vh.filterDate('2015-10-01', '2016-03-01');
var vvw =  vv.filterDate('2015-10-01', '2016-03-01');

// Create timeseries for each month in the year 2015
// for VH polarisation
var vh1 =  vh.filterDate('2015-01-01', '2015-02-01').median();
var vh2 =  vh.filterDate('2015-02-01', '2015-03-01').median();
var vh3 =  vh.filterDate('2015-03-01', '2015-04-01').median();
var vh4 =  vh.filterDate('2015-04-01', '2015-05-01').median();
var vh5 =  vh.filterDate('2015-05-01', '2015-06-01').median();
var vh6 =  vh.filterDate('2015-06-01', '2015-07-01').median();
var vh7 =  vh.filterDate('2015-07-01', '2015-08-01').median();
var vh8 =  vh.filterDate('2015-08-01', '2015-09-01').median();
var vh9 =  vh.filterDate('2015-09-01', '2015-10-01').median();
var vh10 =  vh.filterDate('2015-10-01', '2015-11-01').median();
var vh11 =  vh.filterDate('2015-11-01', '2015-12-01').median();
var vh12 =  vh.filterDate('2015-12-01', '2016-01-01').median();
// for VV polarisation
var vv1 =  vv.filterDate('2015-01-01', '2015-02-01').median();
var vv2 =  vv.filterDate('2015-02-01', '2015-03-01').median();
var vv3 =  vv.filterDate('2015-03-01', '2015-04-01').median();
var vv4 =  vv.filterDate('2015-04-01', '2015-05-01').median();
var vv5 =  vv.filterDate('2015-05-01', '2015-06-01').median();
var vv6 =  vv.filterDate('2015-06-01', '2015-07-01').median();
var vv7 =  vv.filterDate('2015-07-01', '2015-08-01').median();
var vv8 =  vv.filterDate('2015-08-01', '2015-09-01').median();
var vv9 =  vv.filterDate('2015-09-01', '2015-10-01').median();
var vv10 =  vv.filterDate('2015-10-01', '2015-11-01').median();
var vv11 =  vv.filterDate('2015-11-01', '2015-12-01').median();
var vv12 =  vv.filterDate('2015-12-01', '2016-01-01').median();

// create composite for year with each month for VH polarisation
var compositevh = ee.Image.cat([vh1,vh2,vh3,vh4,vh5,vh6,vh7,vh8,vh9,vh10,vh11,vh12]);
// also for VV polarisation
var compositevv = ee.Image.cat([vv1,vv2,vv3,vv4,vv5,vv6,vv7,vv8,vv9,vv10,vv11,vv12]);

// calulate derivatives
var variancevh = compositevh.reduce(ee.Reducer.variance())
var variancevv = compositevv.reduce(ee.Reducer.variance())

var vhvars = vhs.reduce(ee.Reducer.variance());
var vhvarw = vhw.reduce(ee.Reducer.variance());
var vvvars = vhs.reduce(ee.Reducer.variance());
var vvvarw = vhw.reduce(ee.Reducer.variance());
var vhstdw = vhw.reduce(ee.Reducer.stdDev());
var vhstds = vhs.reduce(ee.Reducer.stdDev());
var vvstdw = vvw.reduce(ee.Reducer.stdDev());
var vvstds = vvs.reduce(ee.Reducer.stdDev());


// Combine all derivatives in a composite for the classification
var compall = ee.Image.cat([compositevv,compositevh,vhvars,vhvarw,vvvars,vvvarw,vhstdw,vhstds,vvstds,vvstdw])


// create random points within polygons for training and validation
var trainpoints = ee.FeatureCollection.randomPoints(phragmites,1000,0);
var valpoints = ee.FeatureCollection.randomPoints(phragmites,1000,1);
// create random points at polygons without reed
var trainpoints2 = ee.FeatureCollection.randomPoints(geometry,1000,0);
var valpoints2 = ee.FeatureCollection.randomPoints(geometry,1000,1);


// This function adds presence as a property.
var addpresence = function(feature) {
  return feature.set({presence: 1 });
};

var addabsence = function(feature) {
  return feature.set({presence: 0 });
};
// Map the area getting function over the FeatureCollection.
var prestrain = trainpoints.map(addpresence);
var presval = valpoints.map(addpresence);
var abstrain = trainpoints2.map(addabsence);
var absval = valpoints2.map(addabsence);
// merge points

var traindata = prestrain.merge(abstrain);
var validata  = presval.merge(absval);


// Overlay the points on the imagery to get training.
var training = compall.sampleRegions({
  collection: traindata,
  scale: 10
});

var classifier = ee.Classifier.randomForest(20)
    .train(training, 'presence');

var classified = compall.classify(classifier);

// Overlay the points on the imagery to get validation points
var validation = compall.sampleRegions({
  collection: validata,
  scale: 10
});

var validated = validation.classify(classifier);

// Get a confusion matrix representing expected accuracy.
var testAccuracy = validated.errorMatrix('presence', 'classification');
print('Validation error matrix: ', testAccuracy);
print('Validation overall accuracy: ', testAccuracy.accuracy());

print(traindata)
print(training)

var trainAccuracy = classifier.confusionMatrix();
print('Resubstitution error matrix: ', trainAccuracy);
print('Training overall accuracy: ', trainAccuracy.accuracy());

Map.addLayer(classified)
